#    allextetrominoes.py: Extended tetromino-like shapes
#    Copyright (C) 2024  Ramprasad S. Joshi
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# The classic tetrominoes are the first seven. Later, those shapes of four
# blocks joined on corners too are developed. There may be repetitions in
# these, but these are generated by an octave program that tried all possible
# 4x4 matrices that have four blocks joined on edges or corners. Thus, it
# is exhaustive. If you include these in your tetris (extetris, for extended
# tetris, if you may) then it becomes really much tougher.
# In order to include more of those extended shapes in your game, use the
# "get_any_extetromino(distribution)" call with the distribution that is
# either a list of indices (with frequencies of occurrences of each index
# giving its probability normalised by the length of the list)
# or just a range of indices (less than 74).

import numpy

Extetromino1 = numpy.array([[True, True, True, True]])  # I
Extetromino2 = numpy.array([[True, True], [True, True]])  # O
Extetromino3 = numpy.array([[True, True, True], [True, False, False]])  # L
Extetromino4 = numpy.array([[True, True, True], [False, True, False]])  # T
Extetromino5 = numpy.array([[True, True, True], [False, False, True]])  # Gamma
Extetromino6 = numpy.array([[False, True, True], [True, True, False]])  # S
Extetromino7 = numpy.array([[True, True, False], [False, True, True]])  # Z
Extetromino8 = numpy.array([[True, False, True], [False, True, True]])
Extetromino9 = numpy.array([[True, True, False], [True, False, True]])
Extetromino10 = numpy.array([[True, True, True, True]])  # I repeated for convenience
Extetromino11 = numpy.array([[True, True, True, True]])  # I repeated for convenience
Extetromino12 = numpy.array([[True, True, True, False], [False, False, False, True]])
Extetromino13 = numpy.array([[True, True, False, True], [False, False, True, False]])
Extetromino14 = numpy.array([[True, True, False, False], [False, False, True, True]])
Extetromino15 = numpy.array([[True, False, True, True], [False, True, False, False]])
Extetromino16 = numpy.array([[True, False, True, False], [False, True, False, True]])
Extetromino17 = numpy.array([[True, False, False, True], [False, True, True, False]])
Extetromino18 = numpy.array([[True, False, False, False], [False, True, True, True]])
Extetromino19 = numpy.array([[False, True, True, False], [True, False, False, True]])
Extetromino20 = numpy.array([[False, True, False, False], [True, False, True, True]])
Extetromino21 = numpy.array([[False, False, True, False], [True, True, False, True]])
Extetromino22 = numpy.array([[True, True], [True, False], [False, True]])
Extetromino23 = numpy.array([[True, False], [True, True], [False, True]])
Extetromino24 = numpy.array([[True, False], [False, True], [True, True]])
Extetromino25 = numpy.array(
    [[True, True, False], [False, True, False], [False, False, True]]
)
Extetromino26 = numpy.array(
    [[True, True, False], [False, False, True], [False, True, False]]
)
Extetromino27 = numpy.array(
    [[True, True, False], [False, False, True], [False, False, True]]
)
Extetromino28 = numpy.array(
    [[True, False, True], [False, True, False], [True, False, False]]
)
Extetromino29 = numpy.array(
    [[True, False, True], [False, True, False], [False, True, False]]
)
Extetromino30 = numpy.array(
    [[True, False, True], [False, True, False], [False, False, True]]
)
Extetromino31 = numpy.array(
    [[True, False, False], [True, True, False], [False, False, True]]
)
Extetromino32 = numpy.array(
    [[True, False, False], [True, False, True], [False, True, False]]
)
Extetromino33 = numpy.array(
    [[True, False, False], [True, False, False], [False, True, True]]
)
Extetromino34 = numpy.array(
    [[True, False, False], [False, True, True], [True, False, False]]
)
Extetromino35 = numpy.array(
    [[True, False, False], [False, True, True], [False, True, False]]
)
Extetromino36 = numpy.array(
    [[True, False, False], [False, True, True], [False, False, True]]
)
Extetromino37 = numpy.array(
    [[True, False, False], [False, True, False], [True, False, True]]
)
Extetromino38 = numpy.array(
    [[True, False, False], [False, True, False], [False, True, True]]
)
Extetromino39 = numpy.array(
    [[False, True, True], [True, False, False], [True, False, False]]
)
Extetromino40 = numpy.array(
    [[False, True, True], [True, False, False], [False, True, False]]
)
Extetromino41 = numpy.array(
    [[False, True, True], [False, True, False], [True, False, False]]
)
Extetromino42 = numpy.array(
    [[False, True, False], [True, True, False], [False, False, True]]
)
Extetromino43 = numpy.array(
    [[False, True, False], [True, False, True], [True, False, False]]
)
Extetromino44 = numpy.array(
    [[False, True, False], [True, False, True], [False, True, False]]
)
Extetromino45 = numpy.array(
    [[False, True, False], [True, False, True], [False, False, True]]
)
Extetromino46 = numpy.array(
    [[False, True, False], [True, False, False], [False, True, True]]
)
Extetromino47 = numpy.array(
    [[False, True, False], [False, True, True], [True, False, False]]
)
Extetromino48 = numpy.array(
    [[False, True, False], [False, True, False], [True, False, True]]
)
Extetromino49 = numpy.array(
    [[False, True, False], [False, False, True], [True, True, False]]
)
Extetromino50 = numpy.array(
    [[False, False, True], [True, True, False], [True, False, False]]
)
Extetromino51 = numpy.array(
    [[False, False, True], [True, True, False], [False, True, False]]
)
Extetromino52 = numpy.array(
    [[False, False, True], [True, True, False], [False, False, True]]
)
Extetromino53 = numpy.array(
    [[False, False, True], [True, False, True], [False, True, False]]
)
Extetromino54 = numpy.array(
    [[False, False, True], [False, True, True], [True, False, False]]
)
Extetromino55 = numpy.array(
    [[False, False, True], [False, True, False], [True, True, False]]
)
Extetromino56 = numpy.array(
    [[False, False, True], [False, True, False], [True, False, True]]
)
Extetromino57 = numpy.array(
    [[False, False, True], [False, False, True], [True, True, False]]
)
Extetromino58 = numpy.array(
    [
        [True, True, False, False],
        [False, False, True, False],
        [False, False, False, True],
    ]
)
Extetromino59 = numpy.array(
    [
        [True, False, False, False],
        [False, True, True, False],
        [False, False, False, True],
    ]
)
Extetromino60 = numpy.array(
    [
        [True, False, False, False],
        [False, True, False, True],
        [False, False, True, False],
    ]
)
Extetromino61 = numpy.array(
    [
        [True, False, False, False],
        [False, True, False, False],
        [False, False, True, True],
    ]
)
Extetromino62 = numpy.array(
    [
        [False, True, False, False],
        [True, False, True, False],
        [False, False, False, True],
    ]
)
Extetromino63 = numpy.array(
    [[True, False], [True, False], [True, False], [False, True]]
)
Extetromino64 = numpy.array(
    [[True, False], [True, False], [False, True], [False, True]]
)
Extetromino65 = numpy.array(
    [[True, False], [False, True], [True, False], [False, True]]
)
Extetromino66 = numpy.array(
    [[True, False], [False, True], [False, True], [False, True]]
)
Extetromino67 = numpy.array(
    [
        [True, False, False],
        [True, False, False],
        [False, True, False],
        [False, False, True],
    ]
)
Extetromino68 = numpy.array(
    [
        [True, False, False],
        [False, True, False],
        [False, True, False],
        [False, False, True],
    ]
)
Extetromino69 = numpy.array(
    [
        [True, False, False],
        [False, True, False],
        [False, False, True],
        [False, True, False],
    ]
)
Extetromino70 = numpy.array(
    [
        [True, False, False],
        [False, True, False],
        [False, False, True],
        [False, False, True],
    ]
)
Extetromino71 = numpy.array(
    [
        [False, True, False],
        [True, False, False],
        [False, True, False],
        [False, False, True],
    ]
)
Extetromino72 = numpy.array(
    [
        [True, False, False, False],
        [False, True, False, False],
        [False, False, True, False],
        [False, False, False, True],
    ]
)
Extetromino73 = numpy.array(
    [
        [False, False, False, True],
        [False, False, True, False],
        [False, True, False, False],
        [True, False, False, False],
    ]
)


def get_extetromino_at(index):  # gives a sequential extetromino.
    return eval("Extetromino" + str(index))


import numpy as np
from scipy.stats import expon, norm, uniform


def get_any_extetromino(
    distribution=range(1, 74), freq_distri="uniform", freq_params=None
):
    """
    Returns a randomly selected extetromino from the given distribution,
    with the frequency determined by the specified frequency distribution.

    Args:
        distribution (range or list): A range or list of indices for the extetrominoes.
        freq_distri (str): The type of frequency distribution to use. Accepted values are
            'uniform', 'gaussian', 'exponential', and 'custom'.
        freq_params (tuple or list or None): Parameters for the frequency distribution.
            For 'gaussian', freq_params should be (mean, std).
            For 'uniform', freq_params should be (a, b).
            For 'exponential', freq_params should be (lambda,).
            For 'custom', freq_params should be a list of frequencies for each extetromino index.
            If None, default values will be used.

    Returns:
        An extetromino object selected based on the specified distribution and frequency distribution.
    """
    num_extetrominoes = len(distribution)

    # Generate frequency weights based on the specified frequency distribution
    if freq_distri == "uniform":
        if freq_params is None:
            freq_weights = np.ones(num_extetrominoes) / num_extetrominoes
        else:
            a, b = freq_params
            freq_weights = uniform.pdf(range(a, b), loc=a, scale=b - a)
            freq_weights /= freq_weights.sum()
    elif freq_distri == "gaussian":
        if freq_params is None:
            freq_params = (num_extetrominoes // 2, num_extetrominoes // 4)
        mean, std = freq_params
        freq_weights = norm.pdf(range(num_extetrominoes), loc=mean, scale=std)
        freq_weights /= freq_weights.sum()
    elif freq_distri == "exponential":
        if freq_params is None:
            freq_params = (1.0 / num_extetrominoes,)
        lam = freq_params[0]
        freq_weights = expon.pdf(range(num_extetrominoes), scale=1 / lam)
        freq_weights /= freq_weights.sum()
    elif freq_distri == "custom":
        if freq_params is None:
            raise ValueError(
                "Custom frequencies must be provided for the 'custom' frequency distribution."
            )
        freq_weights = np.array(freq_params)
        freq_weights /= freq_weights.sum()
    else:
        raise ValueError(
            f"Invalid frequency distribution '{freq_distri}'. Accepted values are 'uniform', 'gaussian', 'exponential', and 'custom'."
        )

    # Select an extetromino index based on the distribution and frequency weights
    idx = np.random.choice(distribution, p=freq_weights)

    extetromino_name = "Extetromino" + str(idx)
    return eval(extetromino_name)
